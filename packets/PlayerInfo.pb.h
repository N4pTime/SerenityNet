// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PlayerInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PlayerInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PlayerInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PlayerInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PlayerInfo_2eproto;
namespace PlayerInfo {
class Character;
struct CharacterDefaultTypeInternal;
extern CharacterDefaultTypeInternal _Character_default_instance_;
}  // namespace PlayerInfo
PROTOBUF_NAMESPACE_OPEN
template<> ::PlayerInfo::Character* Arena::CreateMaybeMessage<::PlayerInfo::Character>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PlayerInfo {

// ===================================================================

class Character final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerInfo.Character) */ {
 public:
  inline Character() : Character(nullptr) {}
  ~Character() override;
  explicit constexpr Character(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Character(const Character& from);
  Character(Character&& from) noexcept
    : Character() {
    *this = ::std::move(from);
  }

  inline Character& operator=(const Character& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character& operator=(Character&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character* internal_default_instance() {
    return reinterpret_cast<const Character*>(
               &_Character_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Character& a, Character& b) {
    a.Swap(&b);
  }
  inline void Swap(Character* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Character& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Character& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerInfo.Character";
  }
  protected:
  explicit Character(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kDirectionFieldNumber = 4,
    kUsernameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated float position = 3 [packed = true];
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  float _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_position() const;
  void _internal_add_position(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_position();
  public:
  float position(int index) const;
  void set_position(int index, float value);
  void add_position(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_position();

  // repeated float direction = 4 [packed = true];
  int direction_size() const;
  private:
  int _internal_direction_size() const;
  public:
  void clear_direction();
  private:
  float _internal_direction(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_direction() const;
  void _internal_add_direction(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_direction();
  public:
  float direction(int index) const;
  void set_direction(int index, float value);
  void add_direction(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      direction() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_direction();

  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerInfo.Character)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > direction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PlayerInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Character

// int32 id = 1;
inline void Character::clear_id() {
  id_ = 0;
}
inline int32_t Character::_internal_id() const {
  return id_;
}
inline int32_t Character::id() const {
  // @@protoc_insertion_point(field_get:PlayerInfo.Character.id)
  return _internal_id();
}
inline void Character::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void Character::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlayerInfo.Character.id)
}

// string username = 2;
inline void Character::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& Character::username() const {
  // @@protoc_insertion_point(field_get:PlayerInfo.Character.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Character::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PlayerInfo.Character.username)
}
inline std::string* Character::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:PlayerInfo.Character.username)
  return _s;
}
inline const std::string& Character::_internal_username() const {
  return username_.Get();
}
inline void Character::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Character::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Character::release_username() {
  // @@protoc_insertion_point(field_release:PlayerInfo.Character.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Character::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PlayerInfo.Character.username)
}

// repeated float position = 3 [packed = true];
inline int Character::_internal_position_size() const {
  return position_.size();
}
inline int Character::position_size() const {
  return _internal_position_size();
}
inline void Character::clear_position() {
  position_.Clear();
}
inline float Character::_internal_position(int index) const {
  return position_.Get(index);
}
inline float Character::position(int index) const {
  // @@protoc_insertion_point(field_get:PlayerInfo.Character.position)
  return _internal_position(index);
}
inline void Character::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlayerInfo.Character.position)
}
inline void Character::_internal_add_position(float value) {
  position_.Add(value);
}
inline void Character::add_position(float value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:PlayerInfo.Character.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Character::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Character::position() const {
  // @@protoc_insertion_point(field_list:PlayerInfo.Character.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Character::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Character::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:PlayerInfo.Character.position)
  return _internal_mutable_position();
}

// repeated float direction = 4 [packed = true];
inline int Character::_internal_direction_size() const {
  return direction_.size();
}
inline int Character::direction_size() const {
  return _internal_direction_size();
}
inline void Character::clear_direction() {
  direction_.Clear();
}
inline float Character::_internal_direction(int index) const {
  return direction_.Get(index);
}
inline float Character::direction(int index) const {
  // @@protoc_insertion_point(field_get:PlayerInfo.Character.direction)
  return _internal_direction(index);
}
inline void Character::set_direction(int index, float value) {
  direction_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlayerInfo.Character.direction)
}
inline void Character::_internal_add_direction(float value) {
  direction_.Add(value);
}
inline void Character::add_direction(float value) {
  _internal_add_direction(value);
  // @@protoc_insertion_point(field_add:PlayerInfo.Character.direction)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Character::_internal_direction() const {
  return direction_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Character::direction() const {
  // @@protoc_insertion_point(field_list:PlayerInfo.Character.direction)
  return _internal_direction();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Character::_internal_mutable_direction() {
  return &direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Character::mutable_direction() {
  // @@protoc_insertion_point(field_mutable_list:PlayerInfo.Character.direction)
  return _internal_mutable_direction();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace PlayerInfo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PlayerInfo_2eproto
